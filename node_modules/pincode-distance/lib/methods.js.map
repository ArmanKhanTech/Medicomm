{"version":3,"sources":["../src/methods.js"],"names":["toRad","value","RADIANT_CONSTANT","calculategeoDistance","start","end","KM_RATIO","dLat","lat","dLon","lng","lat1Rad","lat2Rad","a","Math","sin","cos","c","atan2","sqrt","dMtrs","e","PincodeDistance","codes","pincode","toPincode","fromPincode","distance","doesExist","manualDistance","toCoords","getlatLng","fromCoords"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;AAEO,IAAMA,KAAK,GAAG,SAARA,KAAQ,CAAAC,KAAK,EAAI;AAC5B,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,SAAOD,KAAK,GAAGC,gBAAf;AACD,CAHM;AAIP;;;;;;;;;;;;;AASO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,KAAD,EAAQC,GAAR,EAAgB;AAClD,MAAMC,QAAQ,GAAG,IAAjB;;AACA,MAAI;AACF,QAAMC,IAAI,GAAGP,KAAK,CAACK,GAAG,CAACG,GAAJ,GAAUJ,KAAK,CAACI,GAAjB,CAAlB;AACA,QAAMC,IAAI,GAAGT,KAAK,CAACK,GAAG,CAACK,GAAJ,GAAUN,KAAK,CAACM,GAAjB,CAAlB;AACA,QAAMC,OAAO,GAAGX,KAAK,CAACI,KAAK,CAACI,GAAP,CAArB;AACA,QAAMI,OAAO,GAAGZ,KAAK,CAACK,GAAG,CAACG,GAAL,CAArB;AACA,QAAMK,CAAC,GACLC,IAAI,CAACC,GAAL,CAASR,IAAI,GAAG,CAAhB,IAAqBO,IAAI,CAACC,GAAL,CAASR,IAAI,GAAG,CAAhB,CAArB,GACAO,IAAI,CAACC,GAAL,CAASN,IAAI,GAAG,CAAhB,IAAqBK,IAAI,CAACC,GAAL,CAASN,IAAI,GAAG,CAAhB,CAArB,GAA0CK,IAAI,CAACE,GAAL,CAASL,OAAT,CAA1C,GAA8DG,IAAI,CAACE,GAAL,CAASJ,OAAT,CAFhE;AAGA,QAAMK,CAAC,GAAG,IAAIH,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACK,IAAL,CAAUN,CAAV,CAAX,EAAyBC,IAAI,CAACK,IAAL,CAAU,IAAIN,CAAd,CAAzB,CAAd;AACA,QAAMO,KAAK,GAAGd,QAAQ,GAAGW,CAAzB;AACA,WAAOG,KAAP;AACD,GAXD,CAWE,OAAOC,CAAP,EAAU;AACV,WAAO,CAAC,CAAR;AACD;AACF,CAhBM;;;;IAkBDC,e;;;AACJ,6BAAc;AAAA;;AACZ,SAAKC,KAAL,GAAaA,mBAAb;AACD;;;;8BACSC,O,EAAS;AACjB,aAAO,KAAKD,KAAL,CAAWC,OAAX,CAAP;AACD;;;gCACWC,S,EAAWC,W,EAAa;AAClC,UAAIC,QAAQ,GAAG,CAAf;AACA,UAAMC,SAAS,GAAGC,2BAAeJ,SAAf,CAAlB;;AACA,UAAGG,SAAS,IAAIA,SAAS,CAACF,WAAD,CAAzB,EAAwC;AACtCC,QAAAA,QAAQ,GAAGC,SAAS,CAACF,WAAD,CAApB;AACD,OAFD,MAEO;AACL,YAAMI,QAAQ,GAAG,KAAKC,SAAL,CAAeN,SAAf,CAAjB;AACA,YAAMO,UAAU,GAAG,KAAKD,SAAL,CAAeL,WAAf,CAAnB;AACAC,QAAAA,QAAQ,GAAGxB,oBAAoB,CAAC2B,QAAD,EAAWE,UAAX,CAA/B;;AACA,YAAGP,SAAS,KAAKC,WAAjB,EAA8B;AAC5BC,UAAAA,QAAQ,GAAG,CAAX;AACD;AACF;;AACD,aAAOA,QAAP;AACD;;;;;;eAEYL,e","sourcesContent":["import codes from \"./pincode\";\nimport manualDistance from \"./manualDistance\";\n\nexport const toRad = value => {\n  const RADIANT_CONSTANT = 0.0174532925199433;\n  return value * RADIANT_CONSTANT;\n};\n/**\n * [calculategeoDistance calculates the distance in metres between two geocoords]\n * @author  Saurav\n * @version [version]\n * @date    2016-03-10\n * @param   {[type]}   start [description]\n * @param   {[type]}   end   [description]\n * @return  {[type]}            [description]\n */\nexport const calculategeoDistance = (start, end) => {\n  const KM_RATIO = 6371;\n  try {\n    const dLat = toRad(end.lat - start.lat);\n    const dLon = toRad(end.lng - start.lng);\n    const lat1Rad = toRad(start.lat);\n    const lat2Rad = toRad(end.lat);\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1Rad) * Math.cos(lat2Rad);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const dMtrs = KM_RATIO * c;\n    return dMtrs;\n  } catch (e) {\n    return -1;\n  }\n};\n\nclass PincodeDistance {\n  constructor() {\n    this.codes = codes;\n  }\n  getlatLng(pincode) {\n    return this.codes[pincode];\n  }\n  getDistance(toPincode, fromPincode) {\n    let distance = 1;\n    const doesExist = manualDistance[toPincode];\n    if(doesExist && doesExist[fromPincode]) {\n      distance = doesExist[fromPincode]\n    } else {\n      const toCoords = this.getlatLng(toPincode);\n      const fromCoords = this.getlatLng(fromPincode);\n      distance = calculategeoDistance(toCoords, fromCoords);\n      if(toPincode === fromPincode) {\n        distance = 1;\n      }\n    }\n    return distance;\n  }\n}\nexport default PincodeDistance;"],"file":"methods.js"}